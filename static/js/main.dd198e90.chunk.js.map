{"version":3,"sources":["components/field/field.js","components/language/language.js","components/translate/translate.js","App.js","reportWebVitals.js","index.js"],"names":["Field","label","value","onChange","className","type","e","target","LANGUAGES","Language","language","onLanguageChange","undefined","languagesConfig","find","l","Error","useState","open","setOpen","onClick","map","i","onSelect","doTranslation","input","languageCode","cancelToken","a","axios","post","q","token","data","translations","translatedText","Translate","text","translated","setTranslated","useEffect","CancelToken","source","then","cancel","err","App","setText","setLanguage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd198e90.chunk.js","sourcesContent":["\nimport React from 'react';\nimport './field.css';\n\n\nconst Field = ({ label, value, onChange }) => {\n    return (\n        <div>\n            <label>{label}</label>\n            <input\n                className=\"input\"\n                type=\"text\"\n                onChange={e => onChange(e.target.value)}\n                value={value}\n            />\n        </div>\n    );\n};\n\nexport default Field;","import React, { useState } from 'react';\nimport './language.css';\n\nconst LANGUAGES = [\n    { label: \"Afrikaans\", value: \"af\" },\n    { label: \"Arabic\", value: \"ar\" },\n    { label: \"French\", value: \"fr\" },\n    { label: \"Hindi\", value: \"hi\" },\n    { label: \"Japanese\", value: \"ja\" },\n    { label: \"Portuguese\", value: \"pt\" },\n    { label: \"Russian\", value: \"ru\" },\n    { label: \"Simplified Chinese\", value: \"zh-CN\" },\n    { label: \"Spanish\", value: \"es\" },\n    { label: \"Swahili\", value: \"sw\" },\n    { label: \"Thai\", value: \"th\" }\n];\nconst Language = ({ language, onLanguageChange }) => {\n\n    if (language === undefined || language === '') {\n        language = 'es';\n    }\n    const languagesConfig = LANGUAGES.find(l => l.value === language);\n    if (!languagesConfig) {\n        throw new Error(`Unknown language code ${language}`);\n    }\n\n    const [open, setOpen] = useState(false);\n\n    const onSelect = language => {\n        setOpen(false);\n        onLanguageChange(language);\n    };\n    return (\n        <div>\n            <label>Select Language</label>\n            <div className={`dropdown ${open && \"is-active\"}`}>\n                <div className=\"dropdown-trigger\">\n                    <button\n                        className=\"button\"\n                        onClick={() => setOpen(!open)}\n                    >\n                        <span>{languagesConfig.label}</span>\n                        <span className=\"icon is-small\">\n                            <i className=\"fas fa-angle-down\" />\n                        </span>\n                    </button>\n                </div>\n                <div className=\"dropdown-menu\">\n                    <div className=\"dropdown-content\">\n                        {\n                            LANGUAGES.map(({label, value}, i) => {\n                                return (\n                                    <button\n                                        key={i}\n                                        onClick={() => onSelect(value)}\n                                        className=\"dropdown-item\"\n                                    >{label}</button>\n                                );\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Language;","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst doTranslation = async (input, languageCode, cancelToken) => {\n    try {\n        const { data } = await axios.post(\n            'https://translation.googleapis.com/language/translate/v2?key=AIzaSyCf0Xy0OnhxlduyEt3K8zP-sOuu-l_u6uA',\n            {\n                q: input,\n                target: languageCode\n            },\n            {\n                cancelToken: cancelToken.token\n            }\n        );\n        return data.data.translations[0].translatedText;\n    } catch (err) {\n        return \"Translation can't be done because of invalid key\";\n    }\n};\n\nconst Translate = ({ language, text }) => {\n    const [translated, setTranslated] = useState(\"\");\n\n    useEffect(() => {\n        if (!text) {\n            return;\n        }\n        const cancelToken = axios.CancelToken.source();\n\n        doTranslation(text, language, cancelToken).then(setTranslated);\n\n        return () => {\n            try {\n                cancelToken.cancel();\n            } catch (err) { }\n        };\n    }, [text, language]);\n\n    return (\n        <div>\n            <label>{ translated ? 'Translation' : '' }</label>\n            <p className=\"title\">{translated}</p>\n        </div>\n    );\n}\n\nexport default Translate;","import './App.css';\nimport { useState } from 'react';\nimport Field from './components/field/field';\nimport Language from './components/language/language';\nimport Translate from './components/translate/translate';\nfunction App() {\n    const [text, setText] = useState(\"\");\n    const [language, setLanguage] = useState(\"\");\n    return (\n        <div className=\"App\">\n            <Field label=\"Enter English\" value={text} onChange={setText} />\n            <hr />\n            <Language language={language} onLanguageChange={setLanguage} />\n            <hr />\n            <Translate text={text} language={language} />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}